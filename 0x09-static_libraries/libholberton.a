!<arch>
0-isupper.c/    0           0     0     644     191       `
#include "holberton.h"
/**
 * _isupper - check if upper case
 * @c: character.
 * Return: 0 or 1.
 */
int _isupper(int c)
{
  if (c >= 65 && c <= 90)
    return (1);
  else
    return (0);
}

0-memset.c/     0           0     0     644     273       `
#include "holberton.h"
/**
 * *_memset - fill the first n bytes of the memory area.
 * @s: pointer.
 * @b: bytes.
 * @n: integer
 * Return: dest.
 */
char *_memset(char *s, char b, unsigned int n)
{
  unsigned int i;
  for (i = 0; i < n; i++)
    s[i] = b;
  return (s);
}

0-strcat.c/     0           0     0     644     367       `
#include "holberton.h"
/**
 * *_strcat - concats two string.
 * @dest: destination.
 * @src: source
 * Return: dest.
 */
char *_strcat(char *dest, char *src)
{
  int i = 0, j = 0, k;
  while (dest[i] != '\0')
    {
      i++;
    }
  while (src[j] != '\0')
    {
      j++;
    }
  for (k = 0 ; k <= j; k++)
    {
      dest[i + k] = src[k];
    }
  return (dest);
}

100-atoi.c/     0           0     0     644     124       `
#include "holberton.h"
/**
 * _atoi - convert string to integer.
 * @s: pointer.
 * Return: int.
 */
int _atoi(char *s)
{
}
1-isdigit.c/    0           0     0     644     186       `
#include "holberton.h"
/**
 * _isdigit - check if digit
 * @c: character.
 * Return: 0 or 1.
 */
int _isdigit(int c)
{
  if (c >= 48 && c <= 57)
    return (1);
  else
    return (0);
}
1-memcpy.c/     0           0     0     644     286       `
#include "holberton.h"
/**
 * *_memcpy - copies two string.
 * @dest: destination.
 * @src: source
 * @n: unsigned integer.
 * Return: dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
  unsigned int i;
  for (i = 0 ; i < n; i++)
    dest[i] = src[i];
  return (dest);
}
1-strncat.c/    0           0     0     644     407       `
#include "holberton.h"
/**
 * *_strncat - concats two string.
 * @dest: destination.
 * @src: source.
 * @n: integer.
 * Return: dest.
 */
char *_strncat(char *dest, char *src, int n)
{
  int i, j = 0;
  while (dest[j] != '\0')
    {
      j++;
    }
  for (i = 0 ; src[i] != '\0' ; i++)
    {
      if (i < n)
	{
	  dest[j + i] = src[i];
	}
      else
	{
	  dest[j + i] = '\0';
	}
    }
  return (dest);
}

2-strchr.c/     0           0     0     644     235       `
#include "holberton.h"
/**
 * *_strchr - locate a character in a string.
 * @s: char.
 * @c: char
 * Return: dest.
 */
char *_strchr(char *s, char c)
{
  while (*s++)
    {
      if (*s == c)
	{
	  return (s);
	}
    }
  return (0);
}

2-strlen.c/     0           0     0     644     217       `
#include "holberton.h"
/**
 * _strlen - return the length of a string
 * @s: pointer.
 * Return: length of string.
 */
int _strlen(char *s)
{
  int i = 0;
  while (s[i] != '\0')
    {
      i++;
    }
  return (i);
}

2-strncpy.c/    0           0     0     644     362       `
#include "holberton.h"
/**
 * *_strncpy - copies two string.
 * @dest: destination.
 * @src: source.
 * @n: integer.
 * Return: dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
  int i;
  for (i = 0 ; src[i] != '\0' ; i++)
    {
      if (i < n)
	{
	  dest[i] = src[i];
	}
    }
  for ( ; i < n; i++)
    {
      dest[i] = '\0';
    }
  return (dest);
}
3-islower.c/    0           0     0     644     194       `
#include "holberton.h"
/**
 * _islower - check if lower case
 * @c: character.
 * Return: Always 0.
 */
int _islower(int c)
{
  if (c >= 97 && c <= 122)
    return (1);
  else
    return (0);
}
3-puts.c/       0           0     0     644     224       `
#include "holberton.h"
/**
 * _puts - prints to stdout.
 * @str: pointer.
 * Return: void.
 */
void _puts(char *str)
{
  int i = 0;
  while (str[i] != '\0')
    {
      _putchar(str[i]);
      i++;
    }
  _putchar('\n');
}
3-strcmp.c/     0           0     0     644     275       `
#include "holberton.h"
/**
 * _strcmp - compares two string.
 * @s1: destination.
 * @s2: source
 * Return: dest.
 */
int _strcmp(char *s1, char *s2)
{
  int j = 0, n = 0;
  while (s1[j] == s2[j] && s1[j] != '\0')
    {
      j++;
    }
  n += s1[j] - s2[j];
  return (n);
}

3-strspn.c/     0           0     0     644     411       `
#include "holberton.h"
/**
 * *_strspn - get the length of a prefix substring.
 * @s: sting.
 * @accept: string.
 * Return: dest.
 */
unsigned int _strspn(char *s, char *accept)
{
  int i, j, n = 0;
  for (i = 0; s[i] != '\0'; i++)
    {
      for (j = 0; accept[j] != '\0'; j++)
	{
	  if (s[i] == accept[j])
	    {
	      n++;
	      break;
	    }
	}
      if (accept[j] == '\0')
	break;
    }
  return (n);
}

4-isalpha.c/    0           0     0     644     411       `
#include "holberton.h"
/**
 * *_strspn - get the length of a prefix substring.
 * @s: sting.
 * @accept: string.
 * Return: dest.
 */
unsigned int _strspn(char *s, char *accept)
{
  int i, j, n = 0;
  for (i = 0; s[i] != '\0'; i++)
    {
      for (j = 0; accept[j] != '\0'; j++)
	{
	  if (s[i] == accept[j])
	    {
	      n++;
	      break;
	    }
	}
      if (accept[j] == '\0')
	break;
    }
  return (n);
}

4-strpbrk.c/    0           0     0     644     333       `
#include "holberton.h"
/**
 * *_strpbrk - search a string for any set of bytes.
 * @s: string.
 * @accept: string.
 * Return: dest.
 */
char *_strpbrk(char *s, char *accept)
{
  int i;
  while (*s++)
    {
      for (i = 0; accept[i] != '\0'; i++)
	{
	  if (*s == accept[i])
	    {
	      return (s);
	    }
	}
    }
  return (0);
}

5-strstr.c/     0           0     0     644     447       `
#include "holberton.h"
/**
 * *_strstr - search a string for any set of bytes.
 * @haystack: string.
 * @needle: string.
 * Return: dest.
 */
char *_strstr(char *haystack, char *needle)
{
  while (*haystack != '\0')
    {
      char *a = haystack;
      char *b = needle;
      while (*b == *haystack && *a != '\0' && *haystack != '\0')
	{
	  haystack++;
	  b++;
	}
      if (*b == '\0')
	return (a);
      haystack = a + 1;
    }
  return (0);
}

6-abs.c/        0           0     0     644     174       `
#include "holberton.h"
/**
 * _abs - absolute value of n.
 * @n: integer
 * Return: positive n.
 */
int _abs(int n)
{
  if (n >= 0)
    return (n);
  else
    return (-n);
}
9-strcpy.c/     0           0     0     644     308       `
#include "holberton.h"
/**
 * *_strcpy - print half last numbers.
 * @src: pointer.
 * @dest: pointer
 * Return: char.
 */
char *_strcpy(char *dest, char *src)
{
  int n = 0, i;
  while (src[n] != '\0')
    {
      n++;
    }
  for (i = 0; i <= n; i++)
    {
      dest[i] = src[i];
    }
  return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
  return (write(1, &c, 1));
}

